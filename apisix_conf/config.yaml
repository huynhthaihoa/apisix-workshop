#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# APISIX supports setting the IP access allowlist of Admin API to prevent APISIX from being illegally accessed and attacked

apisix:
  node_listen: 9080              # APISIX listening port
  enable_ipv6: false
  
  admin:
    allow_admin:                  # http://nginx.org/en/docs/http/ngx_http_access_module.html#allow
      - 127.0.0.0/24              # We need to restrict ip access rules for security. 0.0.0.0/0 is for test.

    admin_key:
      - name: "admin"
        key: edd1c9f034335f136f87ad84b625c8f1
        role: admin                 # admin: manage all configuration data
                                    # viewer: only can view configuration data
      - name: "viewer"
        key: 4054f7cf07e344346cd3f287985e76a2
        role: viewer

    admin_listen:
      ip: 0.0.0.0
      port: 9180

  enable_control: true
  control:
    ip: "0.0.0.0"
    port: 9092
  
  # A route is a routing path to upstream targets. 
  # In Apache APISIX, routes are responsible for matching client's requests based on defined rules,
  # loading and executing the corresponding plugins, as well as forwarding requests to the specified upstream services.
  # A simple route can be set up with a path-matching URI and a corresponding upstream address.
  routes:
    # HTTP method matching the newly-defined route
    methods: ["GET"]

    # Host matching the newly-defined route
    host: "example.com"

    # URI matching the newly-defined route. 
    # Notice the star character: every URI starting with /anything/ matches.
    uri: "/anything/*"
    
    # An upstream is a set of target nodes with the same work. 
    # It defines a virtual host abstraction that performs load balancing on a given set of service nodes according to the configured rules.
    # Upstream references a cluster of nodes, which you can balance load across, depending on some algorithm
    upstream:
      nodes:
         "httpbin.org:80": 1
      type: roundrobin
     

etcd:
  host:                           # it's possible to define multiple etcd hosts addresses of the same etcd cluster.
    - "http://etcd:2379"     # multiple etcd address
  prefix: "/apisix"               # apisix configurations prefix
  timeout: 30                     # 30 seconds

plugins:
  - http-logger
  - ip-restriction
  - jwt-auth
  - key-auth
  - basic-auth
  - limit-conn
  - limit-count
  - limit-req
  - prometheus
  - serverless-post-function
  - serverless-pre-function
  - zipkin
  - traffic-split
  - azure-functions
  - public-api
  - consumer-restriction
plugin_attr:
  prometheus:
    export_addr:
      ip: "0.0.0.0"
      port: 9091

ext-plugin:
  path_for_test: /tmp/runner.sock
